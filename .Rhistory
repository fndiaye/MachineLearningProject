selectPredict(trainingset, trainingset$classe)
selectPredict <- function (x,y) {
nbCols <- ncol(x)
pvalues <- numeric(nbCols)
for (i in 1:nbCols) {
fit <- lm(y ~ x[,i])
res <- summary(fit)
pvalues[i] <- res$coefficients[2,4]
}
tab <- order(pvalues)
#tab <- subset(tab, pvalues < 0.5)
#nbPred <- nrow(tab)
#predList <- x[,nbPred]
#finalfit <- lm(y ~ predList)
#coef(finalfit)
tab
}
selectPredict(trainingset, trainingset$classe)
selectPredict <- function (x,y) {
nbCols <- ncol(x)
pvalues <- numeric(nbCols)
for (i in seq_len(nbCols)) {
fit <- lm(y ~ x[,i])
res <- summary(fit)
pvalues[i] <- res$coefficients[2,4]
}
tab <- order(pvalues)
#tab <- subset(tab, pvalues < 0.5)
#nbPred <- nrow(tab)
#predList <- x[,nbPred]
#finalfit <- lm(y ~ predList)
#coef(finalfit)
tab
}
selectPredict(trainingset, trainingset$classe)
colnames(trainingset)
ncol(trainingset)
selectPredict <- function (x,y) {
nbCols <- ncol(x)
pvalues <- numeric(nbCols)
for (i in seq_len(nbCols)) {
fit <- lm(y ~ x[,i])
res <- summary(fit)
pvalues[i] <- res$coefficients[2,4]
}
tab <- order(pvalues)
#tab <- subset(tab, pvalues < 0.5)
#nbPred <- nrow(tab)
#predList <- x[,nbPred]
#finalfit <- lm(y ~ predList)
#coef(finalfit)
pvalues
}
selectPredict(trainingset, trainingset$classe)
trainingset = read.csv("./pml-training.csv", na.strip=TRUE)
trainingset = read.csv("./pml-training.csv", strip.na=TRUE)
nzv <- nearZeroVar(trainingset, saveMetrics = TRUE)
nzv
cols <- nzv[nzv==FALSE, 1]
cols
nzv
cols <- nzv[1]
cols
cols <- nzv[nzv==FALSE]
cols
cols <- nzv[,4]==FALSE
cols <- nzv[,nzv[,4]==FALSE]
cols <- subset(nzv, nzv[,4]==FALSE)
cols <- nzv[nzv[,4]==FALSE,1]
cols <- rownames(nzv[nzv[,4]==FALSE,4])
cols <- rownames(nzv[nzv[,4]==FALSE,3])
cols <- names(nzv[nzv[,4]==FALSE,3])
cols <- rownames(nzv[nzv[,4]==FALSE,1])
cols <- nzv[nzv[,4]==FALSE,4]
cols
cols <- nzv[nzv[,4]==FALSE,]
cols
cols <- rownames(nzv[nzv[,4]==FALSE,])
training <- subset(trainingset, select = c(cols))
selectPredict(training, training$classe)
selectPredict <- function (x,y) {
nbCols <- ncol(x)
pvalues <- numeric(nbCols)
for (i in seq_len(nbCols)) {
fit <- lm(y ~ x[,i], na.rm=TRUE)
res <- summary(fit)
pvalues[i] <- res$coefficients[2,4]
}
tab <- order(pvalues)
#tab <- subset(tab, pvalues < 0.5)
#nbPred <- nrow(tab)
#predList <- x[,nbPred]
#finalfit <- lm(y ~ predList)
#coef(finalfit)
pvalues
}
selectPredict(training, training$classe)
t <- c("", NA)
is.na(t)
t[is.na(t)]
nbc <- ncol(training)
for (i in seq_len(nbc)) {
NAdata <- training[is.na(training[, i]),]
tab[i] <- nrow(NAdata)
}
nbc <- ncol(training)
tab <- numeric(nbc)
for (i in seq_len(nbc)) {
NAdata <- training[, i]
NAdata <- !complete.cases(NAdata)
tab[i] <- nrow(NAdata)
}
nbc <- ncol(training)
tab <- c()
nbr <- nrow(training)
thr <- nbr * 0.95
for (i in seq_len(nbc)) {
NAdata <- training[, i]
if(sum(is.na(NAdata)) > thr || sum(NAdata=="") > thr)
tab <- colnames(NAdata)
}
nbc <- ncol(training)
tab <- c()
nbr <- nrow(training)
thr <- nbr * 0.95
for (i in seq_len(nbc)) {
data <- training[, i]
NAdata <- data[is.na(data),]
emptydata <- data[data == "",]
if(nrow(NAdata) > thr || nrow(emptydata) > thr) tab <- rbind(tab,i)
}
nbc <- ncol(training)
tab <- c()
nbr <- nrow(training)
thr <- nbr * 0.95
for (i in seq_len(nbc)) {
data <- training[, i]
NAdata <- data[is.na(data)]
emptydata <- data[data == ""]
if(nrow(NAdata) > thr || nrow(emptydata) > thr) tab <- rbind(tab,i)
}
nbc <- ncol(training)
tab <- data.frame()
nbr <- nrow(training)
thr <- nbr * 0.95
for (i in seq_len(nbc)) {
data <- training[, i]
NAdata <- data[,is.na(data)]
emptydata <- data[,data == ""]
if(nrow(NAdata) > thr || nrow(emptydata) > thr) tab <- rbind(tab,i)
}
nbc <- ncol(training)
tab <- data.frame()
nbr <- nrow(training)
thr <- nbr * 0.95
for (i in seq_len(nbc)) {
data <- training[, i]
NAdata <- subset(data, is.na(data))
emptydata <- subset(data, data == "")
if(nrow(NAdata) > thr || nrow(emptydata) > thr) tab <- rbind(tab,i)
}
for (i in seq_len(nbc)) {
data <- training[, i]
NAdata <- subset(data, is.na(data))
emptydata <- subset(data, data == "")
if(nrow(NAdata) > thr  nrow(emptydata) > thr) tab <- rbind(tab,i)
}
nbc <- ncol(training)
tab <- data.frame()
nbr <- nrow(training)
thr <- nbr * 0.95
for (i in seq_len(nbc)) {
data <- training[, i]
NAdata <- subset(data, is.na(data))
emptydata <- subset(data, data == "")
if(nrow(NAdata) > thr  nrow(emptydata) > thr) tab <- rbind(tab,i)
}
nbc <- ncol(training)
tab <- data.frame()
nbr <- nrow(training)
thr <- nbr * 0.95
for (i in seq_len(nbc)) {
data <- training[, i]
NAdata <- subset(data, is.na(data))
emptydata <- subset(data, data == "")
if(nrow(NAdata) > thr | nrow(emptydata) > thr) tab <- rbind(tab,i)
}
nbc <- ncol(training)
tab <- data.frame()
nbr <- nrow(training)
thr <- nbr * 0.95
for (i in seq_len(nbc)) {
data <- training[, i]
NAdata <- subset(data, is.na(data))
emptydata <- subset(data, data == "")
if(nrow(NAdata) > thr || nrow(emptydata) > thr) tab <- rbind(tab,i)
}
for (i in seq_len(nbc)) {
data <- training[i]
NAdata <- data[is.na(data)]
emptydata <- data == ""
if(nrow(NAdata) > thr || nrow(emptydata) > thr) tab <- rbind(tab,i)
}
tab
for (i in seq_len(nbc)) {
data <- training[,i]
NAdata <- data[is.na(data)]
emptydata <- data == ""
if(nrow(NAdata) > thr || nrow(emptydata) > thr) tab <- rbind(tab,i)
}
for (i in seq_len(nbc)) {
data <- training[,i]
NAdata <- is.na(data)
emptydata <- data == ""
if(nrow(data[NAdata]) > thr || nrow(data[emptydata]) > thr) tab <- rbind(tab,i)
}
for (i in seq_len(nbc)) {
data <- training[,i]
NAdata <- is.na(data)
emptydata <- data == ""
#if(nrow(data[NAdata]) > thr || nrow(data[emptydata]) > thr) tab <- rbind(tab,i)
tab[i] <- nrow(data[NAdata])
}
tab
tab <- data.frame('dataNA','dataEmpty')
tabEmpty <- data.frame()
nbr <- nrow(training)
thr <- nbr * 0.95
for (i in seq_len(nbc)) {
data <- training[,i]
#NAdata <- is.na(data)
#emptydata <- data == ""
#if(nrow(data[NAdata]) > thr || nrow(data[emptydata]) > thr) tab <- rbind(tab,i)
tab[i,dataEmpty] <- nrow(data == "")
tab[i,dataNA] <- nrow(is.na(data))
}
tab
tab <- data.frame('dataNA','dataEmpty')
tabEmpty <- data.frame()
nbr <- nrow(training)
thr <- nbr * 0.95
for (i in seq_len(nbc)) {
data <- training[,i]
#NAdata <- is.na(data)
#emptydata <- data == ""
#if(nrow(data[NAdata]) > thr || nrow(data[emptydata]) > thr) tab <- rbind(tab,i)
tab2 <- data.frame(nrow(data == ""), nrow(is.na(data)))
tab <- rbind(tab,tab2)
}
tab
tab <- data.frame('col','dataNA','dataEmpty')
tabEmpty <- data.frame()
nbr <- nrow(training)
thr <- nbr * 0.95
for (i in seq_len(nbc)) {
data <- training[,i]
NAdata <- is.na(data)
emptydata <- data == ""
#if(nrow(data[NAdata]) > thr || nrow(data[emptydata]) > thr) tab <- rbind(tab,i)
tab2 <- data.frame(i,nrow(data[NAdata]), nrow(data[emptydata]))
tab <- rbind(tab,tab2)
}
tab <- data.frame('dataNA','dataEmpty')
tabEmpty <- data.frame()
nbr <- nrow(training)
thr <- nbr * 0.95
for (i in seq_len(nbc)) {
data <- training[,i]
NAdata <- is.na(data)
emptydata <- data == ""
#if(nrow(data[NAdata]) > thr || nrow(data[emptydata]) > thr) tab <- rbind(tab,i)
tab2 <- data.frame(nrow(data[NAdata]), nrow(data[emptydata]))
tab <- rbind(tab,tab2)
}
tab
nbc <- ncol(training)
tab <- data.frame('dataNA','dataEmpty')
tabEmpty <- data.frame()
nbr <- nrow(training)
thr <- nbr * 90
NaColumns <- apply(training, 2, function(x) sum(is.na(x)) > thr  || sum(x=="") > thr)
training <- training[, -NaColumns]
nbc <- ncol(training)
tab <- data.frame('dataNA','dataEmpty')
tabEmpty <- data.frame()
nbr <- nrow(training)
thr <- nbr * 90
NaColumns <- apply(training, 2, function(x) sum(is.na(x)) > thr  || sum(x=="") > thr)
training <- training[, -c(NaColumns)]
nbc <- ncol(training)
tab <- data.frame('dataNA','dataEmpty')
tabEmpty <- data.frame()
nbr <- nrow(training)
thr <- nbr * 90
NNAColumns <- !apply(training, 2, function(x) sum(is.na(x)) > thr  || sum(x=="") > thr)
training <- training[, NNAColumns]
training <- subset(training, select = c(NNAColumns))
training <- subset(training, select = NNAColumns)
NNAColumns
training <- training[NNAColumns]
training <- training[, 'NNAColumns']
training <- training[, NNAColumns]
nbr <- nrow(training)
thr <- nbr * 90
NNAColumns <- !apply(training, 2, function(x) sum(is.na(x)) > thr  || sum(x=="") > thr)
training <- training[, NNAColumns]
training <- as.table(training)
training <- subset(training, select= c(NNAColumns))
training <- training[NNAColumns]
training <- training[, NNAColumns==true]
training <- training[, NNAColumns==TRUE]
training <- training[, training[NNAColumns == TRUE]]
training <- training[, NNAColumns == TRUE]
training <- training[, -(NNAColumns)]
training <- training[, -(NNAColumns==TRUE)]
training <- training[, -c(NNAColumns==TRUE)]
sum(x=="") > thr)
training <- training[, -c(NNAColumns)]
training <- training[, c(NNAColumns)]
training <- training[, as.integer(NNAColumns)]
training <- training[c(NNAColumns)]
training <- training[NNAColumns]
NNAColumns <- !apply(training, 2, function(x) sum(is.na(x)) > thr  || sum(x=="") > thr)
training <- training[NNAColumns]
NNAColumns <- !apply(training, 2, function(x) sum(is.na(x)) > thr  || sum(x=="") > thr)
training <- training[c(NNAColumns)]
NNAColumns <- !apply(training, 2, function(x) sum(is.na(x)) > thr  || sum(x=="") > thr)
training <- training[, c(NNAColumns)]
NNAColumns
training <- subset(training, select = (NNAColumns==TRUE))
training <- training[, NNAColumns==TRUE]
training <- training[, 'NNAColumns'==TRUE]
training <- subset(trainingset, select = c(cols))
training <- training[, 'NNAColumns']
training <- table(training)
training <- training[, NNAColumns]
trainingset = read.csv("./pml-training.csv")
testset = read.csv("./pml-testing.csv")
nzv <- nearZeroVar(trainingset, saveMetrics = TRUE)
cols <- rownames(nzv[nzv[,4]==FALSE,])
training <- subset(trainingset, select = c(cols))
nbr <- nrow(training)
thr <- nbr * 0.90
NNAColumns <- !apply(training, 2, function(x) sum(is.na(x)) > thr  || sum(x=="") > thr)
training <- training[, NNAColumns]
head(training)
userCols <- training[, 1:6]
head(userCols)
training <- training[, -userCols]
training <- training[, -c(userCols)]
# Let's remove the 6 first variables that are not useful for creating a model since they relate to the username or to the date and time of the record
training <- training[, !userCols]
training <- training[!userCols]
head(trainning)
head(training)
trainingset = read.csv("./pml-training.csv")
testset = read.csv("./pml-testing.csv")
nzv <- nearZeroVar(trainingset, saveMetrics = TRUE)
cols <- rownames(nzv[nzv[,4]==FALSE,])
training <- subset(trainingset, select = c(cols))
nbr <- nrow(training)
thr <- nbr * 0.90
NNAColumns <- !apply(training, 2, function(x) sum(is.na(x)) > thr  || sum(x=="") > thr)
training <- training[, NNAColumns]
training <- training[, 7:59]
selectPredict <- function (x,y) {
nbCols <- ncol(x)
pvalues <- numeric(nbCols)
for (i in seq_len(nbCols)) {
fit <- lm(y ~ x[,i], na.rm=TRUE)
res <- summary(fit)
pvalues[i] <- res$coefficients[2,4]
}
tab <- order(pvalues)
#tab <- subset(tab, pvalues < 0.5)
#nbPred <- nrow(tab)
#predList <- x[,nbPred]
#finalfit <- lm(y ~ predList)
#coef(finalfit)
tab
}
selectPredict(training, training$classe)
selectPredict <- function (x,y) {
nbCols <- ncol(x)
pvalues <- numeric(nbCols)
for (i in seq_len(nbCols)) {
fit <- lm(y ~ x[,i], na.rm=TRUE)
res <- summary(fit)
pvalues[i] <- res$coefficients[2,4]
}
tab <- order(pvalues)
#tab <- subset(tab, pvalues < 0.5)
#nbPred <- nrow(tab)
#predList <- x[,nbPred]
#finalfit <- lm(y ~ predList)
#coef(finalfit)
pvalues
}
selectPredict(training, training$classe)
warnings()
sapply(training,class)
warnings()
selectPredict <- function (x,y) {
nbCols <- ncol(x)
pvalues <- numeric(nbCols)
for (i in seq_len(nbCols)) {
fit <- lm(y ~ x[,i], data = x)
res <- summary(fit)
pvalues[i] <- res$coefficients[2,4]
}
tab <- order(pvalues)
#tab <- subset(tab, pvalues < 0.5)
#nbPred <- nrow(tab)
#predList <- x[,nbPred]
#finalfit <- lm(y ~ predList)
#coef(finalfit)
pvalues
}
selectPredict(training, training$classe)
warnings()
modelrf <- train(classe ~., data = training, method = "rf")
selectPredict <- function (x,y) {
nbCols <- ncol(x)
pvalues <- numeric(nbCols)
for (i in seq_len(nbCols)) {
column <- colnames(x[,i])
fit <- lm(y ~ c(column), data = x)
res <- summary(fit)
pvalues[i] <- res$coefficients[2,4]
}
tab <- order(pvalues)
#tab <- subset(tab, pvalues < 0.5)
#nbPred <- nrow(tab)
#predList <- x[,nbPred]
#finalfit <- lm(y ~ predList)
#coef(finalfit)
pvalues
}
selectPredict(training, training$classe)
selectPredict <- function (x,y) {
nbCols <- ncol(x)
pvalues <- numeric(nbCols)
for (i in seq_len(nbCols)) {
column <- colnames(x[,i])
fit <- lm(y ~ column, data = x)
res <- summary(fit)
pvalues[i] <- res$coefficients[2,4]
}
tab <- order(pvalues)
#tab <- subset(tab, pvalues < 0.5)
#nbPred <- nrow(tab)
#predList <- x[,nbPred]
#finalfit <- lm(y ~ predList)
#coef(finalfit)
pvalues
}
selectPredict(training, training$classe)
selectPredict <- function (x,y) {
nbCols <- ncol(x)
pvalues <- numeric(nbCols)
for (i in seq_len(nbCols)) {
fit <- lm(y ~ x[,i], data = x, na.rm=TRUE)
res <- summary(fit)
pvalues[i] <- res$coefficients[2,4]
}
tab <- order(pvalues)
#tab <- subset(tab, pvalues < 0.5)
#nbPred <- nrow(tab)
#predList <- x[,nbPred]
#finalfit <- lm(y ~ predList)
#coef(finalfit)
pvalues
}
selectPredict(training, training$classe)
modellm <- lm(classe ~., data = training)
summary(modellm)$coef
head(training, 50)
sapply(training, class)
training <- mutate(training, classe=factor(classe))
library(dplyr)
training <- mutate(training, classe=factor(classe))
modellm <- lm(classe ~., data = training)
summary(modellm)$coef
warnings()
training$classe
tail(training, 9622)
tail(training$classe, 10000)
testlm <- predict(modellm, testset)
lmAcc <- postResample(testlm, testset$classe)
??postResample
names(testset)
testset$classe
testset$Classe
testset$problem_id
testset$new_window
training <- mutate(training, classe=factor(classe))
inTrain = createDataPartition(training$classe, p = 0.7, list=FALSE)
trainset = training[ inTrain,]
testset = training[-inTrain,]
modellm <- lm(classe ~., data = trainset)
summary(modellm)$coef
testlm <- predict(modellm, testset)
lmAcc <- postResample(testlm, testset$classe)
rmselm <- rmse(testlm, testset$classe, na.rm=TRUE)
library(rmse)
??rmse
library(hydroGOF)
rmselm <- rmse(testlm, testset$classe, na.rm=TRUE)
testset$classe
rmselm <- rmse(testlm, modellm, na.rm=TRUE)
modellm
rmselm <- rmse(testlm, testset$classe, na.rm=TRUE)
